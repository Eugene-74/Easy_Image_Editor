name: Build C++ Project

env:
  VERSION: v1.0.1

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  deployments: write

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ pkg-config libopencv-dev qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libexiv2-dev

    - name: Build the main project
      run: |
        g++ main.cpp qrc_resources.cpp -fPIC -L./lib -lfolders -o main-linux.exe \
        `pkg-config --cflags --libs Qt5Widgets Qt5Gui Qt5Core opencv4` -lexiv2

    - name: Archive Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: ./main-linux.exe
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download and Install MinGW
      run: |
        curl -L -o mingw-installer.exe "https://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download"
        start /wait mingw-installer.exe /silent
        mingw-get install gcc g++ mingw32-libz mingw32-libz-dev
      shell: cmd

    - name: Add MinGW to PATH
      run: echo "C:\MinGW\bin" >> $Env:PATH
      shell: powershell

    - name: Install OpenCV
      run: choco install -y opencv
      shell: cmd

    - name: Download and Install Qt5
      run: |
        curl -L -o qt-installer.exe "https://download.qt.io/official_releases/qt/5.15/5.15.2/qt-opensource-windows-x86-5.15.2.exe"
        start /wait qt-installer.exe /silent /dir "C:\Qt"
      shell: cmd

    - name: Build the main project
      run: |
        g++ main.cpp qrc_resources.cpp -L./lib -lfolders -o main-windows.exe -lopencv_world -lQt5Widgets -lQt5Gui -lQt5Core -lexiv2
      shell: cmd

    - name: Archive Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: ./main-windows.exe

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]

    steps:
    - name: Download Linux executable
      uses: actions/download-artifact@v4
      with:
        name: linux-build

    - name: Download Windows executable
      uses: actions/download-artifact@v4
      with:
        name: windows-build

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        body: |
          Automated release for commit ${{ github.sha }}.
          # Linux build: [Download Linux Executable](https://github.com/${{ github.repository }}/releases/download/${{ steps.create_release.outputs.tag_name }}/main-linux.exe)
          # Windows build: [Download Windows Executable](https://github.com/${{ github.repository }}/releases/download/${{ steps.create_release.outputs.tag_name }}/main-windows.exe)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux executable
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        files: ./main-linux.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows executable
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        files: ./main-windows.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
