name: Build C++ Project

# Define the version as a constant
env:
  VERSION: v1.0.1

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  deployments: write

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4  # Update to version 4 for Node.js 20 support

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ pkg-config libopencv-dev qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libexiv2-dev

    - name: Build the main project
      run: |
        g++ main.cpp qrc_resources.cpp -fPIC -L./lib -lfolders -o main.exe \
        `pkg-config --cflags --libs Qt5Widgets Qt5Gui Qt5Core opencv4` -lexiv2

    - name: Archive Linux artifacts
      uses: actions/upload-artifact@v4  # Update to version 4 for Node.js 20 support
      with:
        name: linux-build
        path: ./main.exe

  release:
    runs-on: ubuntu-latest
    needs: build-linux  # This job will run after the build job

    steps:
    - name: Download Linux executable
      uses: actions/download-artifact@v4  # Ensure you're using the latest version
      with:
        name: linux-build

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        body: |
          Automated release for commit ${{ github.sha }}.
          # Linux build: [Download Linux Executable](https://github.com/${{ github.repository }}/releases/download/${{ steps.create_release.outputs.tag_name }}/main.exe)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux executable
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        files: ./main.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
