name: Build and Release Linux Executable

on:
  push:
    tags:
      - 'v*..'  # Déclenche le workflow lors de la création d'un tag de version

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies and libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ make cmake pkg-config libopencv-dev qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libexiv2-dev
          sudo apt-get install build-essential
          sudo apt-get install libstdc++-12-dev # Ensure the C++ libraries are available

      - name: Build Qt statically
        run: |
          git clone git://code.qt.io/qt/qt5.git
          cd qt5
          git checkout v5.15.2
          ./init-repository
          ./configure -static -release -prefix /usr/local/Qt-5.15.2-static -nomake examples -nomake tests -opensource -confirm-license
          make -j$(nproc)
          sudo make install

      - name: Build Exiv2 statically
        run: |
          git clone https://github.com/Exiv2/exiv2.git
          cd exiv2
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local/exiv2 ..
          make -j$(nproc)
          sudo make install

      - name: Build OpenCV statically
        run: |
          git clone https://github.com/opencv/opencv.git
          mkdir -p opencv/build && cd opencv/build
          cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/opencv ..
          make -j$(nproc)
          sudo make install

      - name: Set environment variables for static linking
        run: |
          echo "/usr/local/Qt-5.15.2-static/lib" | sudo tee /etc/ld.so.conf.d/qt-static.conf
          echo "/usr/local/exiv2/lib" | sudo tee /etc/ld.so.conf.d/exiv2.conf
          echo "/usr/local/opencv/lib" | sudo tee /etc/ld.so.conf.d/opencv.conf
          sudo ldconfig

      - name: Build the main project with static libraries
        run: |
          g++ main.cpp ressources/qrc_resources.cpp -fPIC -static \
          -I/usr/local/Qt-5.15.2-static/include \
          -L/usr/local/Qt-5.15.2-static/lib \
          -L/usr/local/exiv2/lib \
          -L/usr/local/opencv/lib \
          -lQt5Widgets -lQt5Gui -lQt5Core \
          -lopencv_core -lopencv_imgproc -lopencv_highgui \
          -lexiv2 \
          -static-libgcc -static-libstdc++ \
          -o main-linux

      - name: Verify static linking
        run: |
          ldd main-linux || echo "Statically linked executable"

      - name: Archive Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: ./main-linux

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./main-linux
          asset_name: main-linux
          asset_content_type: application/octet-stream


  # build-windows:
  #   runs-on: windows-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

    # - name: Install vcpkg
    #   run: |
    #     git clone https://github.com/microsoft/vcpkg.git
    #     cd vcpkg
    #     .\bootstrap-vcpkg.bat

    # - name: Install OpenCV and Exiv2 via vcpkg
    #   run: |
    #     .\vcpkg\vcpkg.exe install opencv exiv2 --triplet x64-windows
    # - name: Install vcpkg with binary caching
    #   run: |
    #     git clone https://github.com/microsoft/vcpkg.git
    #     cd vcpkg
    #     .\bootstrap-vcpkg.bat
    #     .\vcpkg.exe integrate install
    #     .\vcpkg.exe install opencv[core] exiv2 --triplet x64-windows --binarysource=default

    # - name: (2) Get all tags for correct version determination
    #   working-directory:  ${{ github.workspace }}
    #   run: |
    #     git fetch --all --tags -f
    # - name: (3) Install Qt
    #   uses: jurplel/install-qt-action@v2
    #   with:
    #     version:      ${{ env.QT_VERSION }}
    #     host:         windows
    #     target:       desktop
    #     arch:         win64_msvc2019_64
    #     dir:          ${{ runner.temp }}
    #     modules:      qtcharts qt3d
    #     setup-python: false


    # - name: Build the main project
    #   run: |
    #     g++ main.cpp ressources/qrc_resources.cpp -fPIC -L./lib -lfolders -o main.exe \
    #     -I"C:\Qt\5.15.2\mingw81_64\include" \
    #     -I"C:\vcpkg\installed\x64-windows\include" \
    #     -L"C:\vcpkg\installed\x64-windows\lib" \
    #     `pkg-config --cflags --libs opencv4` -lexiv2

    # - name: Archive Windows artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: windows-build
    #     path: ./main.exe


  release:
    runs-on: ubuntu-latest
    needs: [build-linux] #, build-windows

    steps:
    - name: Download Linux executable
      uses: actions/download-artifact@v4
      with:
        name: linux-build

    # - name: Download Windows executable
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: windows-build

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        body: |
          Automated release for commit ${{ github.sha }}.
          # Linux build: [Download Linux Executable](https://github.com/${{ github.repository }}/releases/download/${{ steps.create_release.outputs.tag_name }}/main-linux.exe)
          # Windows build: [Download Windows Executable](https://github.com/${{ github.repository }}/releases/download/${{ steps.create_release.outputs.tag_name }}/main-windows.exe)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux executable
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        files: ./main-linux.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Upload Windows executable
    #   uses: softprops/action-gh-release@v1
    #   with:
    #     tag_name: ${{ env.VERSION }}
    #     files: ./main-windows.exe
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
