name: Build C++ Project

env:
  VERSION: v1.0.1
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   5.15.2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  deployments: write

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ pkg-config libopencv-dev qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libexiv2-dev

    - name: Build the main project
      run: |
        g++ main.cpp ressources/qrc_resources.cpp -fPIC -L./lib -lfolders -o main-linux.exe \
        `pkg-config --cflags --libs Qt5Widgets Qt5Gui Qt5Core opencv4` -lexiv2

    - name: Archive Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: ./main-linux.exe


  # build-windows:
  #   runs-on: windows-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

    # - name: Install vcpkg
    #   run: |
    #     git clone https://github.com/microsoft/vcpkg.git
    #     cd vcpkg
    #     .\bootstrap-vcpkg.bat

    # - name: Install OpenCV and Exiv2 via vcpkg
    #   run: |
    #     .\vcpkg\vcpkg.exe install opencv exiv2 --triplet x64-windows
    # - name: Install vcpkg with binary caching
    #   run: |
    #     git clone https://github.com/microsoft/vcpkg.git
    #     cd vcpkg
    #     .\bootstrap-vcpkg.bat
    #     .\vcpkg.exe integrate install
    #     .\vcpkg.exe install opencv[core] exiv2 --triplet x64-windows --binarysource=default

    # - name: (2) Get all tags for correct version determination
    #   working-directory:  ${{ github.workspace }}
    #   run: |
    #     git fetch --all --tags -f
    # - name: (3) Install Qt
    #   uses: jurplel/install-qt-action@v2
    #   with:
    #     version:      ${{ env.QT_VERSION }}
    #     host:         windows
    #     target:       desktop
    #     arch:         win64_msvc2019_64
    #     dir:          ${{ runner.temp }}
    #     modules:      qtcharts qt3d
    #     setup-python: false


    # - name: Build the main project
    #   run: |
    #     g++ main.cpp ressources/qrc_resources.cpp -fPIC -L./lib -lfolders -o main.exe \
    #     -I"C:\Qt\5.15.2\mingw81_64\include" \
    #     -I"C:\vcpkg\installed\x64-windows\include" \
    #     -L"C:\vcpkg\installed\x64-windows\lib" \
    #     `pkg-config --cflags --libs opencv4` -lexiv2

    # - name: Archive Windows artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: windows-build
    #     path: ./main.exe


  release:
    runs-on: ubuntu-latest
    needs: [build-linux] #, build-windows

    steps:
    - name: Download Linux executable
      uses: actions/download-artifact@v4
      with:
        name: linux-build

    - name: Download Windows executable
      uses: actions/download-artifact@v4
      with:
        name: windows-build

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: Release ${{ env.VERSION }}
        body: |
          Automated release for commit ${{ github.sha }}.
          # Linux build: [Download Linux Executable](https://github.com/${{ github.repository }}/releases/download/${{ steps.create_release.outputs.tag_name }}/main-linux.exe)
          # Windows build: [Download Windows Executable](https://github.com/${{ github.repository }}/releases/download/${{ steps.create_release.outputs.tag_name }}/main-windows.exe)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux executable
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        files: ./main-linux.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Upload Windows executable
    #   uses: softprops/action-gh-release@v1
    #   with:
    #     tag_name: ${{ env.VERSION }}
    #     files: ./main-windows.exe
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
