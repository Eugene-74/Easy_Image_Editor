name: Build C++ Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [created]  # Trigger on release creation

jobs:
    
  build-linux:
    runs-on: ubuntu-latest

    steps:
        
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++ pkg-config libopencv-dev qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libexiv2-dev

    - name: Verify pkg-config Installation
      run: |
        pkg-config --version

    - name: Run library compilation script
      run: |
        chmod +x compileLib.sh  # Make sure the script is executable
        ./compileLib.sh  # Run the script

    - name: Build the main project
      run: |
        g++ main.cpp qrc_resources.cpp -fPIC -L./lib -lfolders -o main.exe \
        `pkg-config --cflags --libs Qt5Widgets Qt5Gui Qt5Core opencv4` -lexiv2

    - name: Archive Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: linux-build
        path: ./main.exe

#   build-windows:
#     runs-on: windows-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Install vcpkg
#       run: |
#         git clone https://github.com/microsoft/vcpkg.git
#         cd vcpkg
#         .\bootstrap-vcpkg.bat
#         .\vcpkg.exe integrate install

#     - name: Install Exiv2 via vcpkg
#       run: |
#         cd vcpkg
#         .\vcpkg.exe install exiv2

#     - name: Download Qt Installer
#       run: |
#         curl -L -o qt-installer.exe https://download.qt.io/official_releases/online_installers/qt-unified-windows-x86-online.exe

#     - name: Verify Downloaded Qt Installer
#       run: |
#         if (Test-Path qt-installer.exe) {
#             certutil -hashfile qt-installer.exe SHA256
#             # Compare the hash here with the expected hash
#         } else {
#             Write-Host "Failed to download Qt installer."
#             exit 1
#         }

#     - name: Install dependencies
#       run: |
#         choco install mingw
#         setx /M PATH "C:\Qt\5.x\mingw64\bin;%PATH%"

#     - name: Verify pkg-config Installation
#       run: |
#         where pkg-config

#     - name: Build the main project
#       run: |
#         g++ main.cpp qrc_resources.cpp -fPIC -L./lib -lfolders -o main.exe ^
#         -I"C:\Qt\5.15.2\mingw81_64\include" ^
#         -I"C:\vcpkg\installed\x64-windows\include" ^
#         -L"C:\vcpkg\installed\x64-windows\lib" ^
#         $(C:\vcpkg\installed\x64-windows\bin\pkg-config --cflags --libs opencv4) -lexiv2

#     - name: Archive Windows artifacts
#       uses: actions/upload-artifact@v3
#       with:
#         name: windows-build
#         path: ./main.exe

  release:
    runs-on: ubuntu-latest  # or windows-latest depending on your needs

    needs: [build-linux]  # , build-windows Wait for the previous jobs to complete
    steps:
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          - Linux build: ${{ steps.linux-build.outputs.artifact_url }}
        #   - Windows build: ${{ steps.windows-build.outputs.artifact_url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux executable
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        files: ./main.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Upload Windows executable
    #   uses: softprops/action-gh-release@v1
    #   with:
    #     tag_name: ${{ github.ref }}
    #     files: ./main.exe
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
